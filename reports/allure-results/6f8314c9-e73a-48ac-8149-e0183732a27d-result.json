{"name": "test_checkout_valid", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff6deaa1eb5+80197]\n\tGetHandleVerifier [0x0x7ff6deaa1f10+80288]\n\t(No symbol) [0x0x7ff6de8202fa]\n\t(No symbol) [0x0x7ff6de877cd7]\n\t(No symbol) [0x0x7ff6de877f9c]\n\t(No symbol) [0x0x7ff6de8cba87]\n\t(No symbol) [0x0x7ff6de8a03bf]\n\t(No symbol) [0x0x7ff6de8c87fb]\n\t(No symbol) [0x0x7ff6de8a0153]\n\t(No symbol) [0x0x7ff6de868b02]\n\t(No symbol) [0x0x7ff6de8698d3]\n\tGetHandleVerifier [0x0x7ff6ded5e83d+2949837]\n\tGetHandleVerifier [0x0x7ff6ded58c6a+2926330]\n\tGetHandleVerifier [0x0x7ff6ded786c7+3055959]\n\tGetHandleVerifier [0x0x7ff6deabcfee+191102]\n\tGetHandleVerifier [0x0x7ff6deac50af+224063]\n\tGetHandleVerifier [0x0x7ff6deaaaf64+117236]\n\tGetHandleVerifier [0x0x7ff6deaab119+117673]\n\tGetHandleVerifier [0x0x7ff6dea910a8+11064]\n\tBaseThreadInitThunk [0x0x7ffbb85ce8d7+23]\n\tRtlUserThreadStart [0x0x7ffbb9e08d9c+44]", "trace": "setup = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"440a42ee89c109c27c81331f05ccd8f4\")>, <pages.login_page.LoginPage object at 0x0000026A71E7ED70>)\n\n    def test_checkout_valid(setup: tuple[WebDriver, LoginPage]):\n        driver, login = setup\n    \n        # Step 1: Login\n        login.login(config.valid_username, config.valid_password)\n    \n        # Step 2: Inventory Page\n        inventory = InventoryPage(driver)\n        inventory.add_to_cart()\n        inventory.go_to_cart()\n    \n        # Step 3: Cart Page\n        cart = CartPage(driver)\n        cart.proceed_to_checkout()\n    \n    \n        # Step 4: Checkout Page\n        checkout = CheckoutPage(driver)\n        checkout.fill_information(\"Muskaan\", \"QA\", \"12345\")\n>       checkout.finish_order()\n\ntests\\test_checkout.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\checkout_page.py:38: in finish_order\n    WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"440a42ee89c109c27c81331f05ccd8f4\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000026A71FC6340>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6deaa1eb5+80197]\nE       \tGetHandleVerifier [0x0x7ff6deaa1f10+80288]\nE       \t(No symbol) [0x0x7ff6de8202fa]\nE       \t(No symbol) [0x0x7ff6de877cd7]\nE       \t(No symbol) [0x0x7ff6de877f9c]\nE       \t(No symbol) [0x0x7ff6de8cba87]\nE       \t(No symbol) [0x0x7ff6de8a03bf]\nE       \t(No symbol) [0x0x7ff6de8c87fb]\nE       \t(No symbol) [0x0x7ff6de8a0153]\nE       \t(No symbol) [0x0x7ff6de868b02]\nE       \t(No symbol) [0x0x7ff6de8698d3]\nE       \tGetHandleVerifier [0x0x7ff6ded5e83d+2949837]\nE       \tGetHandleVerifier [0x0x7ff6ded58c6a+2926330]\nE       \tGetHandleVerifier [0x0x7ff6ded786c7+3055959]\nE       \tGetHandleVerifier [0x0x7ff6deabcfee+191102]\nE       \tGetHandleVerifier [0x0x7ff6deac50af+224063]\nE       \tGetHandleVerifier [0x0x7ff6deaaaf64+117236]\nE       \tGetHandleVerifier [0x0x7ff6deaab119+117673]\nE       \tGetHandleVerifier [0x0x7ff6dea910a8+11064]\nE       \tBaseThreadInitThunk [0x0x7ffbb85ce8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffbb9e08d9c+44]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "start": 1759149548401, "stop": 1759149574860, "uuid": "37455002-ef98-425c-b312-95e712e266b5", "historyId": "f2798d2c894ddbd740f46549439dc863", "testCaseId": "f2798d2c894ddbd740f46549439dc863", "fullName": "tests.test_checkout#test_checkout_valid", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_checkout"}, {"name": "host", "value": "Muskaan"}, {"name": "thread", "value": "37036-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_checkout"}], "titlePath": ["tests", "test_checkout.py"]}